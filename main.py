import argparse
import asyncio
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from database import AsyncSessionLocal
from db_models import Group, Teacher, Subject, Student, Grade

async def create(session: AsyncSession, model, **kwargs):
    obj = model(**kwargs)
    session.add(obj)
    await session.commit()
    print(f"‚úÖ {model.__name__} —Å—Ç–≤–æ—Ä–µ–Ω–æ: {obj}")

async def list_all(session: AsyncSession, model):
    result = await session.execute(select(model))
    records = result.scalars().all()
    if not records:
        print(f"‚ö†Ô∏è –£ —Ç–∞–±–ª–∏—Ü—ñ {model.__tablename__} –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
    else:
        print(f"\nüìã –°–ø–∏—Å–æ–∫ {model.__tablename__}:")
        for record in records:
            print(f"   {record}")


async def update(session: AsyncSession, model, id, **kwargs):
    obj = await session.get(model, id)
    if obj:
        for key, value in kwargs.items():
            setattr(obj, key, value)
        await session.commit()
        print(f"‚úÖ {model.__name__} –æ–Ω–æ–≤–ª–µ–Ω–æ: {obj}")
    else:
        print(f"‚ùå {model.__name__} –∑ ID {id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def remove(session: AsyncSession, model, id):
    obj = await session.get(model, id)
    if obj:
        await session.delete(obj)
        await session.commit()
        print(f"‚úÖ {model.__name__} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        print(f"‚ùå {model.__name__} –∑ ID {id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def main():
    parser = argparse.ArgumentParser(description="CLI –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î —à–∫–æ–ª–∏")

    parser.add_argument("-a", "--action", choices=["create", "list", "update", "remove"], required=True, help="CRUD –æ–ø–µ—Ä–∞—Ü—ñ—è")
    parser.add_argument("-m", "--model", choices=["Group", "Teacher", "Subject", "Student", "Grade"], required=True, help="–ú–æ–¥–µ–ª—å")

    parser.add_argument("-id", type=int, help="ID –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
    parser.add_argument("-n", "--name", type=str, help="–Ü–º'—è")
    parser.add_argument("--group_id", type=int, help="ID –≥—Ä—É–ø–∏")
    parser.add_argument("--teacher_id", type=int, help="ID –≤–∏–∫–ª–∞–¥–∞—á–∞")
    parser.add_argument("--subject_id", type=int, help="ID –ø—Ä–µ–¥–º–µ—Ç–∞")
    parser.add_argument("--student_id", type=int, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
    parser.add_argument("--value", type=int, help="–û—Ü—ñ–Ω–∫–∞")

    args = parser.parse_args()
    async with AsyncSessionLocal() as session:
        model_map = {
            "Group": Group,
            "Teacher": Teacher,
            "Subject": Subject,
            "Student": Student,
            "Grade": Grade
        }
        model = model_map[args.model]

        if args.action == "create":
            data = {k: v for k, v in vars(args).items() if v is not None and k not in ["action", "model", "id"]}
            await create(session, model, **data)

        elif args.action == "list":
            await list_all(session, model)

        elif args.action == "update":
            if args.id:
                data = {k: v for k, v in vars(args).items() if v is not None and k not in ["action", "model", "id"]}
                await update(session, model, args.id, **data)
            else:
                print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ --id –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

        elif args.action == "remove":
            if args.id:
                await remove(session, model, args.id)
            else:
                print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ --id –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

if __name__ == "__main__":
    asyncio.run(main())
